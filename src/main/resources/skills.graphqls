schema {
  query: Query
}

type Query {
  skill(id: String!): SkillDTO!
  skills(filter: SkillFilter): [SkillDTO!]!
  category(id: String!): Category!
  categories: [Category!]!
  craft(id: String): Craft!
  crafts: [Craft!]!
  grade(id: String): Grade!
  grades: [Grade!]!
}

type SkillDTO {
  id: ID!
  title: String!
  description: String!
  examples: String
  category: Category!
  grade: Grade!
  craftTitles: [CraftTitle!]
}

type Category {
  id: ID!
  title: CategoryTitle!
  description: String!
}

enum CategoryTitle {
  technical,
  leadership,
  collaboration,
  consulting,
  delivery
}

type Craft {
  id: ID!
  title: CraftTitle!
  description: String!
  leads: [String!]!
  slackChannels: [String!]!
  devServicesPage: String!
}

enum CraftTitle {
  core,
  architecture,
  backEnd,
  frontEnd,
  mobile,
  platform
}

type Grade {
  id: ID!
  title: GradeTitle!
  description: String!
  hrCode: String!
}

enum GradeTitle {
  analystDeveloper,
  developer,
  seniorDeveloper,
  technicalLead,
  seniorTechnicalLead,
  director,
  partner
}

input SkillFilter {
  categoryTitle: CategoryTitle
  gradeTitle: GradeTitle
  craftTitles: [CraftTitle]
}